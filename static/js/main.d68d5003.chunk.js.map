{"version":3,"sources":["components/Section/Section.js","components/Feedback/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedBackOptions","options","onLeaveFeedback","map","option","type","onClick","slice","toUpperCase","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","this","Object","keys","FeedbackOptions","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAWeA,EATC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCSUC,EAdS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAHjC,SAKGA,EAAOG,MAAM,EAAG,GAAGC,cAAgBJ,EAAOG,MAAM,IAJ5CH,SCeEK,EAjBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,wCAAWJ,EAAX,OACA,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCNWC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC2D3BC,E,4MApDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPV,gBAAkB,SAAAE,GAChB,EAAKe,UAAS,SAAAC,GAAS,sBACpBhB,EAASgB,EAAUhB,GAAU,O,EAGlCiB,mBAAqB,WAAO,IAAD,EACM,EAAKH,MACpC,OAFyB,EACjBR,KADiB,EACXC,QADW,EACFC,K,EAIzBU,gCAAkC,WAAO,IAC/BZ,EAAS,EAAKQ,MAAdR,KACFG,EAAQ,EAAKQ,qBACnB,OAAOR,GAAUH,EAAOG,EAAS,KAAKU,QAAQ,GAAK,G,uDAG3C,IAAD,EACwBC,KAAKN,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBX,EAAUwB,OAAOC,KAAKF,KAAKN,OAC3BL,EAAQW,KAAKH,qBACbP,EAAqBU,KAAKF,kCAChC,OACE,qCACE,cAAC,EAAD,CAASxB,MAAM,wBAAf,SACE,cAAC6B,EAAD,CACE1B,QAASA,EACTC,gBAAiBsB,KAAKtB,oBAG1B,cAAC,EAAD,CAASJ,MAAM,aAAf,SACa,IAAVe,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAcE,QAAQ,+B,GA9ChBY,IAAMC,WCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d68d5003.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nexport default Section;\r\n","const FeedBackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div>\r\n    {options.map(option => (\r\n      <button\r\n        key={option}\r\n        type=\"button\"\r\n        onClick={() => onLeaveFeedback(option)}\r\n      >\r\n        {option.slice(0, 1).toUpperCase() + option.slice(1)}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default FeedBackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <ul>\r\n    <li>Good: {good} </li>\r\n    <li>Neutral: {neutral}</li>\r\n    <li>Bad: {bad}</li>\r\n    <li>Total: {total}</li>\r\n    <li>Positive feedback: {positivePercentage}%</li>\r\n  </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n};\r\nexport default Statistics;\r\n","const Notification = ({ message }) => <p>{message}</p>;\r\n\r\nexport default Notification;\r\n","import React from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/Feedback';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? ((good / total) * 100).toFixed(0) : 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total !== 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}